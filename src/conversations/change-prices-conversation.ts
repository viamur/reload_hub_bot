import {Conversation} from '@grammyjs/conversations';
import {MyContext} from '../types/types';
import {mainMenuKeyboard, shareContactKeyboard} from '../keyboards/replyKeyboards';
import {InlineKeyboard} from 'grammy';
import {unitDisplayMap} from '../data/options';
import {MaterialPrice} from '../models/MaterialPrice';
import {sleep} from '../utils/sleep';
require("dotenv").config();

export async function changePricesConversation(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  while (true) {
    const materials = await MaterialPrice.find().lean();

    const message =
      "üì¶ <b>–í—Å—ñ –º–∞—Ç–µ—Ä—ñ–∞–ª–∏ –∑ –ë–∞–∑–∏ –î–∞–Ω–Ω–∏—Ö:</b>\n\n" +
      materials
        .map((m) => {
          const unit = unitDisplayMap[m.unit] ?? m.unit;
          return `üîπ <b>${m.name}</b>\n‚ÄÉ‚ÄÉ${m.price.toFixed(2)} –≥—Ä–Ω / ${unit}\n‚ÄÉ‚ÄÉ${m.active ? '‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π' : '‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}`;
        })
        .join("\n\n");

    await ctx.reply(message, { parse_mode: "HTML" });

    const keyboard = InlineKeyboard.from(materials.map((m) => [InlineKeyboard.text(m.name, `material:${m._id}`)]));

    await ctx.reply("üì¶ *–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∏—Ä–æ–≤–∏–Ω–∏*:", {
      parse_mode: "Markdown",
      reply_markup: keyboard
    });

    const selectedMaterial = await conversation.waitForCallbackQuery(/^material:/, {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.");
      }
    });

    await selectedMaterial.answerCallbackQuery();
    const materialId = selectedMaterial.callbackQuery.data?.split(":")[1];

    const selectedMaterialData = await MaterialPrice.findById(materialId);
    if (!selectedMaterialData) {
      await ctx.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Å–∏—Ä–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      return;
    }

    await selectedMaterial.editMessageText(`‚úÖ *–í–∏ –æ–±—Ä–∞–ª–∏ —Å–∏—Ä–æ–≤–∏–Ω—É:* ${selectedMaterialData.name}`, {
      parse_mode: "Markdown"
    });

    await ctx.reply('–Ø–∫—ñ –∑–º—ñ–Ω–∏ –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏?', {
      reply_markup: InlineKeyboard.from([
        [InlineKeyboard.text('–ó–º—ñ–Ω–∏—Ç–∏ —Ü—ñ–Ω—É', `change_price:${materialId}`)],
        [InlineKeyboard.text('–ó–º—ñ–Ω–∏—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å', `toggle_active:${materialId}`)],
        [InlineKeyboard.text('–ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É', `back_to_list:${materialId}`)]
      ])
    })

    const action = await conversation.waitForCallbackQuery(/^(change_price|toggle_active|back_to_list):/, {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.");
      }
    });

    await action.answerCallbackQuery();
    const [actionType] = action.callbackQuery.data?.split(":") || [];

    if (actionType === 'back_to_list') {
      continue;
    }

    if (actionType === 'change_price') {
      await action.editMessageText('–í–∏ –æ–±—Ä–∞–ª–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω–∏ –¥–ª—è —Å–∏—Ä–æ–≤–∏–Ω–∏: ' + selectedMaterialData.name)
      await ctx.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è —Å–∏—Ä–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12.34):");

      while (true) {
        const priceInput = await conversation.form.text();
        const parsed = parseFloat(priceInput.trim().replace(",", "."));

        if (!isNaN(parsed) && parsed >= 0) {
          const material = await MaterialPrice.findById(selectedMaterialData._id);
          if (!material) {
            await ctx.reply("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–∏—Ä–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
            return;
          }
          // Update the price
          material.price = parsed;
          await material.save();
          await ctx.reply(`‚úÖ –¶—ñ–Ω–∞ –¥–ª—è —Å–∏—Ä–æ–≤–∏–Ω—É "${material.name}" –æ–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞ ${parsed.toFixed(2)} –≥—Ä–Ω.`);
          break;
        }

        await ctx.reply("‚ùó –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.34");
      }
    } else if (actionType === 'toggle_active') {
      await action.editMessageText('–í–∏ –æ–±—Ä–∞–ª–∏ –∑–º—ñ–Ω—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ –¥–ª—è —Å–∏—Ä–æ–≤–∏–Ω–∏: ' + selectedMaterialData.name);
      await ctx.reply('–í–∏–±–µ—Ä—ñ—Ç—å —Å—Ç–∞–Ω —Å–∏—Ä–æ–≤–∏–Ω–∏:', {
        reply_markup: InlineKeyboard.from([
          [InlineKeyboard.text('‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π', `toggle_active:true`)],
          [InlineKeyboard.text('‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω–∏–π', `toggle_active:false`)],
        ])
      })

      const activeAction = await conversation.waitForCallbackQuery(/^(change_price|toggle_active|back_to_list):/, {
        otherwise: async(ctx) => {
          return ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.");
        }
      })

      await activeAction.answerCallbackQuery();
      const activeState = activeAction.callbackQuery.data?.split(":")[1] === 'true';
      const material = await MaterialPrice.findByIdAndUpdate(selectedMaterialData._id, {active: activeState});
      if (!material) {
        await ctx.reply("‚ùó –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å–∏—Ä–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
        return;
      }
      await activeAction.editMessageText(`‚úÖ –°—Ç–∞–Ω —Å–∏—Ä–æ–≤–∏–Ω–∏ "${material.name}" –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${activeState ? '–∞–∫—Ç–∏–≤–Ω–∏–π' : '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–π'}.`)
    }

    await ctx.reply('–•–æ—á–µ—Ç–µ –≤–Ω–µ—Å—Ç–∏ –∑–º—ñ–Ω–∏ –¥–æ —ñ–Ω—à–æ—ó —Å–∏—Ä–æ–≤–∏–Ω–∏?', {
      reply_markup: InlineKeyboard.from([
        [InlineKeyboard.text('–¢–∞–∫', 'change_prices')],
        [InlineKeyboard.text('–ù—ñ, –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é', 'back_to_menu')]
      ])
    })

    const nextAction = await conversation.waitForCallbackQuery(/^(change_prices|back_to_menu)$/, {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.");
      }
    });

    await nextAction.answerCallbackQuery();
    const nextActionType = nextAction.callbackQuery.data?.split(":")[0];

    if (nextActionType === 'change_prices') {
      await nextAction.editMessageText('–í–∏ –æ–±—Ä–∞–ª–∏ –∑–º—ñ–Ω—É —Ü—ñ–Ω –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É. –ü–æ–≤–µ—Ä—Ç–∞—é—Å—å –¥–æ —Å–ø–∏—Å–∫—É —Å–∏—Ä–æ–≤–∏–Ω–∏...');
      continue;
    }

    await nextAction.editMessageText('–î—è–∫—É—é –∑–∞ –≤–Ω–µ—Å–µ–Ω—ñ –∑–º—ñ–Ω–∏!');
    break;
  }

  // Return to the main menu
  return ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.oneTime(),
  });
}
