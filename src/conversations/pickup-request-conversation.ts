import { Conversation } from "@grammyjs/conversations";
import { MyContext } from "../types/types";
import { shareContactKeyboard, mainMenuKeyboard } from "../keyboards/replyKeyboards";
import { InlineKeyboard } from "grammy";
import { district_options } from "../data/options";
import {generateSessionState} from '../session/generateSessionState';
require("dotenv").config();

export async function pickupRequestConversation(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  if (!ctx.session) {
    ctx.session = generateSessionState()
  }

  // CONTACT
  await ctx.reply("üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", {
    reply_markup: shareContactKeyboard.oneTime(),
  });

  const contactUpdate = await conversation.waitFor("message:contact", {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.");
    },
  });

  ctx.session.pickup.phone = contactUpdate.message.contact.phone_number;

  await ctx.reply("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!", {
    reply_markup: { remove_keyboard: true }
  });

  // WEIGHT
  await ctx.reply("‚öñÔ∏è –í–∫–∞–∂—ñ—Ç—å –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω—É –º–∞—Å—É —Å–∏—Ä–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5 –∫–≥):", {  });

  const weightUpdate = await conversation.form.text();
  ctx.session.pickup.weight = weightUpdate;

  // PHOTO
  await ctx.reply("üì∑ –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Å–∏—Ä–æ–≤–∏–Ω–∏:");

  const photoUpdate = await conversation.waitFor("message:photo", {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–æ—Ç–æ, –±—É–¥—å –ª–∞—Å–∫–∞.");
    },
  });

  const largestPhoto = photoUpdate.message.photo?.at(-1);
  ctx.session.pickup.photoFileId = largestPhoto?.file_id || ""

  await ctx.reply('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞!')

  // DISTRICT
  await ctx.reply("üìç *–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:*", { parse_mode: "Markdown" });
  await ctx.reply("–í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω –∑ –≤–∞—Ä—ñ–∞–Ω—Ç—ñ–≤:", {
    reply_markup: InlineKeyboard.from(
      district_options.map((btn) => [InlineKeyboard.text(btn, `pickup_district:${btn}`)])
    ),
  });

  const districtOption = await conversation.waitForCallbackQuery(/^pickup_district:/, {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.");
    },
  });

  const selectedDistrict = districtOption.callbackQuery.data?.split(":")[1];
  ctx.session.pickup.region = selectedDistrict || "";

  await districtOption.answerCallbackQuery();
  await districtOption.editMessageText(`‚úÖ *–†–∞–π–æ–Ω:* ${ctx.session.pickup.region}`, {
    parse_mode: "Markdown",
  });

  // SUMMARY
  await ctx.reply(
    `‚úÖ *–í–∞—à –∑–∞–ø–∏—Ç:*\n\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: +${ctx.session.pickup.phone}\n` +
    `‚öñÔ∏è –ú–∞—Å–∞: ${ctx.session.pickup.weight}\n` +
    `üìç –†–∞–π–æ–Ω: ${ctx.session.pickup.region}`,
    { parse_mode: "Markdown" }
  );

  if (ctx.from) {
    await ctx.api.sendPhoto(+process.env.ADMIN_ID, ctx.session.pickup.photoFileId, {
      caption:
        `üì¶ *–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–ª–∏–∫:*\n\n` +
        `üë§ *–Ü–º‚Äô—è:* ${ctx.from.first_name || "-"}\n` +
        `üîó *Telegram:* @${ctx.from.username || "-"}\n` +
        `üÜî *User ID:* ${ctx.from.id}\n\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: +${ctx.session.pickup.phone}\n` +
        `‚öñÔ∏è –ú–∞—Å–∞: ${ctx.session.pickup.weight}\n` +
        `üìç –†–∞–π–æ–Ω: ${ctx.session.pickup.region}\n\n` +
        `üïì *–î–∞—Ç–∞:* ${new Date().toLocaleString("uk-UA", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        })}`,
      parse_mode: "Markdown",
    });
  }

  await ctx.reply("‚úÖ *–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.*", {
    parse_mode: "Markdown",
  });

  return ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.oneTime(),
  });
}
