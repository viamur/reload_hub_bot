import {Conversation} from '@grammyjs/conversations';
import {MyContext} from '../types/types';
import {mainMenuKeyboard, shareContactKeyboard} from '../keyboards/replyKeyboards';
import {InlineKeyboard} from 'grammy';
import {district_options} from '../data/options';
import {generateSessionState} from '../session/generateSessionState';
import {MaterialPrice} from '../models/MaterialPrice';
import {User} from '../models/User';
import {PickupRequest} from '../models/PickupRequest';
import {generateCode} from '../utils/generateCode';

require("dotenv").config();

export async function pickupRequestConversation(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  if (!ctx.session) {
    ctx.session = generateSessionState()
  }

  // CONTACT
  await ctx.reply("üìû –ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–¥—ñ–ª—ñ—Ç—å—Å—è –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω—É:", {
    reply_markup: shareContactKeyboard.oneTime(),
  });

  const contactUpdate = await conversation.waitFor("message:contact", {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´–ü–æ–¥—ñ–ª–∏—Ç–∏—Å—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–º¬ª.");
    },
  });

  ctx.session.pickup.phone = contactUpdate.message.contact.phone_number;

  await ctx.reply("‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç –æ—Ç—Ä–∏–º–∞–Ω–æ!", {
    reply_markup: { remove_keyboard: true }
  });

  // MATERIAL TYPE
  const materials = await MaterialPrice.find({ active: true}).sort({ name: 1 });
  const keyboard = InlineKeyboard.from([
    ...materials.map((m) => [InlineKeyboard.text(m.name, `pickup_material:${m._id}`)]),
    [InlineKeyboard.text('‚ôªÔ∏è –ú—ñ–∫—Å', 'pickup_material:mix')]
  ]);

  await ctx.reply("üì¶ *–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø —Å–∏—Ä–æ–≤–∏–Ω–∏*:", {
    parse_mode: "Markdown",
    reply_markup: keyboard
  });

  const selectedMaterial = await conversation.waitForCallbackQuery(/^pickup_material:/, {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É.");
    }
  });

  await selectedMaterial.answerCallbackQuery();
  const materialId = selectedMaterial.callbackQuery.data?.split(":")[1] || 'mix';

  if (materialId === 'mix') {
    ctx.session.pickup.materialName = '–ú—ñ–∫—Å —Å–∏—Ä–æ–≤–∏–Ω–∏';
    await selectedMaterial.editMessageText('‚úÖ *–í–∏ –æ–±—Ä–∞–ª–∏ –º—ñ–∫—Å —Å–∏—Ä–æ–≤–∏–Ω–∏.*', {
      parse_mode: "Markdown"
    })
  } else {
    const selectedMaterialData = await MaterialPrice.findById(materialId);
    if (!selectedMaterialData) {
      await ctx.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä —Å–∏—Ä–æ–≤–∏–Ω–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      return;
    }
    ctx.session.pickup.materialId = materialId;
    ctx.session.pickup.materialName = selectedMaterialData.name;
    ctx.session.pickup.materialPrice = selectedMaterialData.price;
    await selectedMaterial.editMessageText(`‚úÖ *–í–∏ –æ–±—Ä–∞–ª–∏ —Å–∏—Ä–æ–≤–∏–Ω—É:* ${selectedMaterialData.name}`, {
      parse_mode: "Markdown"
    });
  }

  // WEIGHT
  await ctx.reply("‚öñÔ∏è –í–∫–∞–∂—ñ—Ç—å –æ—Ä—ñ—î–Ω—Ç–æ–≤–Ω—É –º–∞—Å—É —Å–∏—Ä–æ–≤–∏–Ω–∏ –≤ –∫–≥ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 5.5):");

  while (true) {
    const weightInput = await conversation.form.text();
    const parsed = parseFloat(weightInput.trim().replace(",", "."));

    if (!isNaN(parsed) && parsed > 0) {
      ctx.session.pickup.weight = parsed;

      if (ctx.session.pickup.materialPrice) {
        ctx.session.pickup.amount = +(parsed * ctx.session.pickup.materialPrice).toFixed(2);
      }

      break;
    }

    await ctx.reply("‚ùó –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 3 –∞–±–æ 7.5");
  }

  // PHOTO
  await ctx.reply("üì∑ –•–æ—á–µ—Ç–µ –ø—Ä–∏–∫—Ä—ñ–ø–∏—Ç–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Å–∏—Ä–æ–≤–∏–Ω–∏?", {
    reply_markup: new InlineKeyboard()
      .text('–¢–∞–∫, –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏ —Ñ–æ—Ç–æ', 'add_photo').row()
      .text('–ù—ñ, –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏ —Ñ–æ—Ç–æ', 'skip_photo')
  });

  const photoOption = await conversation.waitForCallbackQuery(/^add_photo$|^skip_photo$/);
  await photoOption.answerCallbackQuery();

  if (photoOption.callbackQuery.data === 'skip_photo') {
    ctx.session.pickup.photoFileId = "";
    await photoOption.editMessageText('üì∑‚ùå –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –ø—Ä–æ–ø—É—â–µ–Ω–∞.');
  } else if (photoOption.callbackQuery.data === 'add_photo') {
    await photoOption.editMessageText('üì∑ –ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—é —Å–∏—Ä–æ–≤–∏–Ω–∏:');
    const photoUpdate = await conversation.waitFor("message:photo", {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ù–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∞–º–µ —Ñ–æ—Ç–æ, –±—É–¥—å –ª–∞—Å–∫–∞.");
      },
    });

    const largestPhoto = photoUpdate.message.photo?.at(-1);
    ctx.session.pickup.photoFileId = largestPhoto?.file_id || ""

    await ctx.reply('‚úÖ –§–æ—Ç–æ–≥—Ä–∞—Ñ—ñ—è –æ—Ç—Ä–∏–º–∞–Ω–∞!')
  }

  // DISTRICT
  await ctx.reply("üìç *–û–±–µ—Ä—ñ—Ç—å —Ä–∞–π–æ–Ω:*", {
    parse_mode: "Markdown",
    reply_markup: InlineKeyboard.from(
      district_options.map((btn) => [InlineKeyboard.text(btn, `pickup_district:${btn}`)])
    ),
  });

  const districtOption = await conversation.waitForCallbackQuery(/^pickup_district:/, {
    otherwise: async (ctx) => {
      await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏.");
    },
  });

  const selectedDistrict = districtOption.callbackQuery.data?.split(":")[1];
  ctx.session.pickup.region = selectedDistrict || "";

  await districtOption.answerCallbackQuery();
  await districtOption.editMessageText(`‚úÖ *–†–∞–π–æ–Ω:* ${ctx.session.pickup.region}`, {
    parse_mode: "Markdown",
  });

  // SUMMARY
  await ctx.reply(
    `‚úÖ *–í–∞—à –∑–∞–ø–∏—Ç:*\n\n` +
    `üìû –¢–µ–ª–µ—Ñ–æ–Ω: +${ctx.session.pickup.phone}\n` +
    'üì¶ –¢–∏–ø —Å–∏—Ä–æ–≤–∏–Ω–∏: ' + ctx.session.pickup.materialName + '\n' +
    `‚öñÔ∏è –ú–∞—Å–∞: ${ctx.session.pickup.weight}–∫–≥\n` +
    `üìç –†–∞–π–æ–Ω: ${ctx.session.pickup.region}`,
    { parse_mode: "Markdown" }
  );

  if (ctx.from) {
    const user = await User.findOne({ telegramId: ctx.from.id });
    if (user) {
      if (!user.phone) {
        user.phone = ctx.session.pickup.phone;
        await user.save();
      }

      const counts = await PickupRequest.countDocuments();
      const newPickupRequest = new PickupRequest({
        user: user._id,
        material: ctx.session.pickup.materialId || undefined,
        photoFileId: ctx.session.pickup.photoFileId || undefined,
        amount: ctx.session.pickup.amount,
        phone: ctx.session.pickup.phone,
        weight: ctx.session.pickup.weight,
        region: ctx.session.pickup.region,
        comment: `–¢–∏–ø —Å–∏—Ä–æ–≤–∏–Ω–∏: ${ctx.session.pickup.materialName}`,
        code: generateCode('PKU', counts + 1),
      })

      await newPickupRequest.save();

      const messageForAdmin =
        `üì¶ *–ù–æ–≤–∏–π –∑–∞–ø–∏—Ç –Ω–∞ –≤–∏–∫–ª–∏–∫:*\n\n` +
        `üë§ *–Ü–º‚Äô—è:* ${ctx.from.first_name || "-"}\n` +
        `üîó *Telegram:* @${ctx.from.username || "-"}\n` +
        `üÜî *User ID:* ${ctx.from.id}\n\n` +
        `üìû –¢–µ–ª–µ—Ñ–æ–Ω: +${ctx.session.pickup.phone}\n` +
        'üì¶ –¢–∏–ø —Å–∏—Ä–æ–≤–∏–Ω–∏: ' + ctx.session.pickup.materialName + '\n' +
        `üí∞ –°—É–º–∞: ${ctx.session.pickup.amount || 0}–≥—Ä–Ω\n` +
        `‚öñÔ∏è –ú–∞—Å–∞: ${ctx.session.pickup.weight}–∫–≥\n` +
        `üìç –†–∞–π–æ–Ω: ${ctx.session.pickup.region}\n\n` +
        `üïì *–î–∞—Ç–∞:* ${new Date().toLocaleString("uk-UA", {
          year: "numeric",
          month: "2-digit",
          day: "2-digit",
          hour: "2-digit",
          minute: "2-digit",
        })}`;

      if (ctx.session.pickup.photoFileId) {
        await ctx.api.sendPhoto(+process.env.ADMIN_ID, ctx.session.pickup.photoFileId, {
          caption: messageForAdmin,
          parse_mode: "Markdown",
        });
      } else {
        await ctx.api.sendMessage(+process.env.ADMIN_ID, messageForAdmin, {
          parse_mode: "Markdown",
        });
      }

      if (ctx.chat) {
        await ctx.api.forwardMessage(+process.env.ADMIN_ID, ctx.chat.id, contactUpdate.message.message_id);
      }
    }
  }

  await ctx.reply("‚úÖ *–î—è–∫—É—î–º–æ! –ú–∏ –∑–≤‚Äô—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–∞–π–±–ª–∏–∂—á–∏–º —á–∞—Å–æ–º.*", {
    parse_mode: "Markdown",
  });

  return ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.oneTime(),
  });
}
