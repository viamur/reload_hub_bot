import {Conversation} from '@grammyjs/conversations';
import {MyContext} from '../types/types';
import {mainMenuKeyboard, shareContactKeyboard} from '../keyboards/replyKeyboards';
import {InlineKeyboard} from 'grammy';
import {unitDisplayMap} from '../data/options';
import {MaterialPrice, MaterialUnit} from '../models/MaterialPrice';
import {generateMessageMaterialList} from '../utils/generateMessage';
import {sleep} from '../utils/sleep';
require("dotenv").config();

export async function createMaterialConversation(
  conversation: Conversation<MyContext, MyContext>,
  ctx: MyContext
) {
  while (true) {
    // NAME INPUT
    // NAME INPUT
    // NAME INPUT
    await ctx.reply("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –Ω–æ–≤—É –Ω–∞–∑–≤—É —Å–∏—Ä–æ–≤–∏–Ω–∏:", {
      reply_markup: { remove_keyboard: true }
    });

    const newNameInput = await conversation.form.text();
    const trimmedName = newNameInput.trim();

    if (trimmedName.length < 3) {
      await ctx.reply("‚ùó –ù–∞–∑–≤–∞ –º–∞—î –±—É—Ç–∏ –Ω–µ –º–µ–Ω—à–µ 3 —Å–∏–º–≤–æ–ª—ñ–≤. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      continue;
    }

    const existingName = await MaterialPrice.findOne({ name: trimmedName });

    if (existingName) {
      await ctx.reply("‚ùó –°–∏—Ä–æ–≤–∏–Ω–∞ –∑ —Ç–∞–∫–æ—é –Ω–∞–∑–≤–æ—é –≤–∂–µ —ñ—Å–Ω—É—î. –°–ø—Ä–æ–±—É–π—Ç–µ —ñ–Ω—à—É –Ω–∞–∑–≤—É.");
      continue;
    }

    const newMaterial = new MaterialPrice({
      name: trimmedName,
      price: 0
    });

    // PRICE INPUT
    // PRICE INPUT
    // PRICE INPUT
    await ctx.reply("üí∞ –í–≤–µ–¥—ñ—Ç—å —Ü—ñ–Ω—É –¥–ª—è —Å–∏—Ä–æ–≤–∏–Ω–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 12.34):");

    while (true) {
      const priceInput = await conversation.form.text();
      const parsed = parseFloat(priceInput.trim().replace(",", "."));

      if (!isNaN(parsed) && parsed >= 0) {
        newMaterial.price = parsed;
        break;
      }

      await ctx.reply("‚ùó –í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, –∫–æ—Ä–µ–∫—Ç–Ω—É —Ü—ñ–Ω—É. –ù–∞–ø—Ä–∏–∫–ª–∞–¥: 12.34");
    }

    // UNIT SELECTION
    // UNIT SELECTION
    // UNIT SELECTION
    await ctx.reply('üì¶ –í–∏–±–µ—Ä—ñ—Ç—å –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É —Å–∏—Ä–æ–≤–∏–Ω–∏:', {
      reply_markup: InlineKeyboard.from(
        Object.entries(unitDisplayMap).map(([unit, display]) => [
          InlineKeyboard.text(display, `unit:${unit}`)
        ])
      )
    })

    const unitAction = await conversation.waitForCallbackQuery(/^unit:/, {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤–∏–±–æ—Ä—É –æ–¥–∏–Ω–∏—Ü—ñ –≤–∏–º—ñ—Ä—É.");
      }
    })

    await unitAction.answerCallbackQuery();
    const selectedUnit = unitAction.callbackQuery.data?.split(":")[1] as MaterialUnit;

    if (!selectedUnit || !unitDisplayMap[selectedUnit]) {
      await ctx.reply("‚ùó –ù–µ–≤—ñ—Ä–Ω–∞ –æ–¥–∏–Ω–∏—Ü—è –≤–∏–º—ñ—Ä—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      continue;
    }

    await unitAction.editMessageText('‚úÖ –í–∏ –æ–±—Ä–∞–ª–∏ –æ–¥–∏–Ω–∏—Ü—é –≤–∏–º—ñ—Ä—É: ' + unitDisplayMap[selectedUnit], {
      parse_mode: "HTML"
    })

    newMaterial.unit = selectedUnit;

    // DESCRIPTION INPUT (optional)
    // DESCRIPTION INPUT (optional)
    // DESCRIPTION INPUT (optional)
    await ctx.reply("üìù –ë–∞–∂–∞—î—Ç–µ –¥–æ–¥–∞—Ç–∏ –æ–ø–∏—Å —Å–∏—Ä–æ–≤–∏–Ω–∏? (–ø–æ–∫–∏ —Ü–µ —Å–∏—Å—Ç–µ–º–Ω–∏–π –æ–ø–∏—Å)", {
      reply_markup: InlineKeyboard.from([
        [InlineKeyboard.text("–¢–∞–∫", "desc_yes"), InlineKeyboard.text("–ù—ñ", "desc_no")]
      ])
    });

    const descDecision = await conversation.waitForCallbackQuery(/^desc_(yes|no)$/, {
      otherwise: async (ctx) => {
        await ctx.reply("‚ùó –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂—á–µ.");
      }
    });

    await descDecision.answerCallbackQuery();
    const descChoice = descDecision.callbackQuery.data;

    if (descChoice === 'desc_yes') {
      await ctx.reply("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –æ–ø–∏—Å —Å–∏—Ä–æ–≤–∏–Ω–∏:");
      const descriptionInput = await conversation.form.text();
      newMaterial.description = descriptionInput.trim();
    } else {
      newMaterial.description = '';
    }

    // Save the new material
    await newMaterial.save();

    await ctx.reply(
      `‚úÖ <b>–°–∏—Ä–æ–≤–∏–Ω–∞ —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n` +
      `üì¶ <b>–ù–∞–∑–≤–∞:</b> ${newMaterial.name}\n` +
      `üí∞ <b>–¶—ñ–Ω–∞:</b> ${newMaterial.price.toFixed(2)} –≥—Ä–Ω / ${unitDisplayMap[newMaterial.unit]}\n` +
      (newMaterial.description
        ? `üìù <b>–û–ø–∏—Å:</b> ${newMaterial.description.trim()}`
        : `üìù <i>–û–ø–∏—Å –Ω–µ –≤–∫–∞–∑–∞–Ω–æ</i>`),
      {
        parse_mode: 'HTML'
      }
    );

    const materials = await MaterialPrice.find();
    await ctx.reply(generateMessageMaterialList(materials), {
      parse_mode: 'HTML'
    });

    await sleep(2000);

    break;
  }

  // Return to the main menu
  return ctx.reply("–ü–æ–≤–µ—Ä—Ç–∞—é—Å—å —É –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", {
    reply_markup: mainMenuKeyboard.oneTime(),
  });
}
