import {type ConversationFlavor, conversations, createConversation} from '@grammyjs/conversations';
require('dotenv').config();
import { Bot, GrammyError, HttpError, Keyboard, type Context, session, type SessionFlavor } from "grammy";
import { collaborateConversation } from "./conversations/collaborate";
import {mainMenuKeyboard} from './keyboards/keyBoards';
import {getUserFullName} from './utils/getUserFullName';


const token = process.env.BOT_TOKEN;
const adminId = process.env.ADMIN_ID;
if (!token) {
  console.error('‚ùå empty BOT_TOKEN in .env');
  process.exit(1);
}

interface MySession {
  collab: { type: string; region: string; contact: string };
}

// Install session middleware, and define the initial session value.
function initial(): MySession {
  return {
    collab: {
      type: "",
      region: "",
      contact: "",
    }
  };
}

type Session = Context & SessionFlavor<MySession>;

export type MyContext = ConversationFlavor<Session>;

const bot = new Bot<MyContext>(token);

bot.use(conversations());
bot.use(session({ initial }))
bot.use(createConversation(collaborateConversation));

bot.api.setMyCommands([
  { command: 'main_menu', description: '–ì–æ–ª–æ–≤–Ω–µ –ú–µ–Ω—é üìç' },
  { command: 'help',  description: '–î–æ–ø–æ–º–æ–≥–∞ ‚ùì' },
])

// bot.hears('ID', async (ctx) => {
//   await ctx.reply('ID: ' + ctx.from?.id);
// })

bot.command('start', async (ctx) => {
  await ctx.reply(
    '–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –∑ –ø—Ä–∏–π–æ–º—É –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏! –û–±–µ—Ä—ñ—Ç—å, —â–æ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å:',
    { reply_markup: mainMenuKeyboard }
  );
});

bot.command('main_menu', async (ctx) => {
  await ctx.reply(
    '–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá',
    { reply_markup: mainMenuKeyboard }
  );
});

bot.command('help', async (ctx) => {
  await ctx.reply('help');
});

bot.command('admin', async (ctx) => {
  if (!adminId) {
    console.error('‚ùå empty ADMIN_ID in .env');
    return;
  }

  if (!ctx.from) {
    console.error('‚ùå ctx.from is undefined');
    return;
  }

  if (adminId === String(ctx.from.id)) {
    await ctx.reply('Welcome, admin!');
  } else {
    console.log(`‚ùå User ${getUserFullName(ctx.from)} (${ctx.from.id} - ${ctx.from.username}) tried to access admin command.`, 'color: red');
    await ctx.api.sendMessage(adminId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${getUserFullName(ctx.from)} (${ctx.from.id} - ${ctx.from.username}) –Ω–∞–º–∞–≥–∞–≤—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.`);
  }
});

// bot.hears('ping', async (ctx) => {
//   await ctx.reply('pong', {
//     reply_parameters: {
//       message_id: ctx.msg?.message_id
//     }
//   });
// })

bot.on("edited_message", async (ctx) => {
  // Get the new, edited, text of the message.
  const editedText = ctx.msg.text;
  console.log(`editedText: ${editedText}`);
});


bot.on('message:text', async ctx => {
  const txt = ctx.message.text;
  switch (txt) {
    case 'üéâ –•–æ—á—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏':
      await ctx.conversation.enter('collaborateConversation')
      break;
    case 'üìç –î–µ –∑–¥–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–î–µ –∑–¥–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫‚Ä¶');
    case 'üöö –í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é‚Äù. –ü–∏—Ç–∞—î–º–æ –∞–¥—Ä–µ—Å—É‚Ä¶');
    case 'üí∞ –¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –û—Ç–∞–∫–µ‚Ä¶');
    case 'üõ† –Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶');
    case 'üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É‚Äù. –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ‚Ä¶');
    case '‚ùì FAQ':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚ÄúFAQ‚Äù. –ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ‚Ä¶');
    case 'üó£ –û–ø–µ—Ä–∞—Ç–æ—Ä':
      return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–û–ø–µ—Ä–∞—Ç–æ—Ä‚Äù. –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É—î–º–æ‚Ä¶');
    default:
      if (adminId) {
        await ctx.api.sendMessage(adminId, `–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${getUserFullName(ctx.from)}: ${ctx.message.text}`);
      }
      return;
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const error = err.error;

  if (error instanceof GrammyError) {
    console.error('‚ö†Ô∏è Error in request:', error.description);
  } else if (error instanceof HttpError) {
    console.error('‚ö†Ô∏è Could not contact Telegram:', error);
  } else {
    console.error('‚ö†Ô∏è Unknown error:', error);
  }
})

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start()
  .then(() => console.log('‚úÖ Started bot'))
  .catch(err => console.error('Bot startup error:', err));
