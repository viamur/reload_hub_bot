import {conversations, createConversation} from '@grammyjs/conversations';
import { Bot, GrammyError, HttpError, type Context, session, type SessionFlavor } from "grammy";
import { collaborateConversation } from "./conversations/collaborate";
import {mainMenuKeyboard} from './keyboards/replyKeyboards';
import {getUserFullName} from './utils/getUserFullName';
import 'dotenv/config';
import mongoose from 'mongoose';
import type {MyContext, MySession} from './types/types';
import {commandStart} from './commands/index.js';


const token = process.env.BOT_TOKEN;
const adminId = process.env.ADMIN_ID;
if (!token) {
  console.error('‚ùå--empty BOT_TOKEN in .env');
  process.exit(1);
}

// Install session middleware, and define the initial session value.
function initial(): MySession {
  return {
    collab: {
      type: "",
      region: "",
      contact: "",
    }
  };
}

const bot = new Bot<MyContext>(token);

bot.use(conversations());
bot.use(session({ initial }))
bot.use(createConversation(collaborateConversation));

bot.api.setMyCommands([
  { command: 'start', description: 'üè† –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' },
  { command: 'menu', description: 'üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' },
  { command: 'support', description: 'üí¨ –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é' },
  { command: 'contacts', description: 'üì± –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏' },
])

bot.command('start', commandStart);

bot.command('menu', async (ctx) => {
  await ctx.reply(
    '–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá',
    { reply_markup: mainMenuKeyboard }
  );
});

bot.command('support', async (ctx) => {
  await ctx.reply(
    `üìù –ë—É–¥—å –ª–∞—Å–∫–∞, –æ–ø–∏—à—ñ—Ç—å –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è:\n\n` +
    `‚Ä¢ –ß–∏–º –º–æ–∂–µ–º–æ –¥–æ–ø–æ–º–æ–≥—Ç–∏?\n` +
    `‚Ä¢ –í–∫–∞–∂—ñ—Ç—å –¥–µ—Ç–∞–ª—ñ –ø—Ä–æ–±–ª–µ–º–∏\n` +
    `‚Ä¢ –î–æ–¥–∞–π—Ç–µ —Å–∫—Ä—ñ–Ω—à–æ—Ç, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ\n\n` +
    `‚åõ –ó–∞–∑–≤–∏—á–∞–π –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω \n` +
    `‚ú® –î—è–∫—É—î–º–æ –∑–∞ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è!`
  );

  ctx.session.timestampSendMessage = Date.now();

  const adminMessage =
    `üîî –ù–æ–≤–µ –∑–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏!\n\n` +
    `üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á: ${ctx.from?.username || ctx.from?.first_name || '–ê–Ω–æ–Ω—ñ–º'}\n` +
    `üÜî ID: ${ctx.from?.id}\n` +
    `üìÖ –ß–∞—Å: ${new Date().toLocaleString('uk-UA')}\n\n` +
    `‚è≥ –û—á—ñ–∫—É—î –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å...`;

  await ctx.api.sendMessage(+adminId, adminMessage);
  await ctx.api.forwardMessage(+adminId, ctx.chat.id, ctx.msg.message_id);
});

bot.command('contacts', async (ctx) => {
  await ctx.reply('contacts');
});

bot.command('admin', async (ctx) => {
  if (!adminId) {
    console.error('‚ùå--empty ADMIN_ID in .env');
    return;
  }

  if (!ctx.from) {
    console.error('‚ùå--ctx.from is undefined');
    return;
  }

  if (adminId === String(ctx.from.id)) {
    await ctx.reply('Welcome, admin!');
  } else {
    console.log(`‚ùå--User ${getUserFullName(ctx.from)} (${ctx.from.id} - ${ctx.from.username}) tried to access admin command.`);
    await ctx.api.sendMessage(adminId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${getUserFullName(ctx.from)} (${ctx.from.id} - ${ctx.from.username}) –Ω–∞–º–∞–≥–∞–≤—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.`);
  }
});

bot.on("edited_message", async (ctx) => {
  // Get the new, edited, text of the message.
  const editedText = ctx.msg.text;
  console.log(`editedText: ${editedText}`);
});

bot.hears('üéâ –•–æ—á—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', async (ctx) => {
  await ctx.conversation.enter('collaborateConversation')
})

bot.on('message:text', async ctx => {
  const txt = ctx.message.text;
  const isAdmin = ctx.chat.id === Number(adminId);

  try {
    if (isAdmin && ctx.msg.reply_to_message?.forward_origin?.type === 'user') {
      const replyFromId = ctx.msg.reply_to_message.forward_origin.sender_user.id;
      await ctx.api.sendMessage(replyFromId, ctx.msg.text);
      return;
    }

    switch (txt) {
      case 'üìç –î–µ –∑–¥–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–î–µ –∑–¥–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –°–ø–∏—Å–æ–∫ —Ç–æ—á–æ–∫‚Ä¶');
      case 'üöö –í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é‚Äù. –ü–∏—Ç–∞—î–º–æ –∞–¥—Ä–µ—Å—É‚Ä¶');
      case 'üí∞ –¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –û—Ç–∞–∫–µ‚Ä¶');
      case 'üõ† –Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É‚Äù. –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è‚Ä¶');
      case 'üìù –ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–ó–∞–ª–∏—à–∏—Ç–∏ –∑–∞—è–≤–∫—É‚Äù. –ó–±–∏—Ä–∞—î–º–æ –¥–∞–Ω—ñ‚Ä¶');
      case '‚ùì FAQ':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚ÄúFAQ‚Äù. –ü–∏—Ç–∞–Ω–Ω—è —Ç–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ‚Ä¶');
      case 'üó£ –û–ø–µ—Ä–∞—Ç–æ—Ä':
        return ctx.reply('üëâ –í–∏ –æ–±—Ä–∞–ª–∏ ‚Äú–û–ø–µ—Ä–∞—Ç–æ—Ä‚Äù. –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É—î–º–æ‚Ä¶');
      default:
        if (!isAdmin) {
          await ctx.api.forwardMessage(Number(adminId), ctx.chat.id, ctx.msg.message_id);

          console.log('ctx.session?.timestampSendMessage', ctx.session?.timestampSendMessage)
          if (!ctx.session?.timestampSendMessage || ctx.session.timestampSendMessage < Date.now() - 1000 * 20) {
            ctx.session.timestampSendMessage = Date.now();
            return ctx.reply(
              `‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n` +
              `üëã –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è\n` +
              `‚åõÔ∏è –ó–∞–∑–≤–∏—á–∞–π –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω\n\n` +
              `üôå –î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è!`
            );

          }

        }
    }
  } catch (error) {
    console.error('‚ùå--Error in message handler:', error);
    return ctx.reply(
      `‚ùå –û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n` +
      `üîÑ –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω\n` +
      `üí° –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @support_username`
    );
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const error = err.error;

  if (error instanceof GrammyError) {
    console.error('‚ö†Ô∏è--Error in request:', error.description);
  } else if (error instanceof HttpError) {
    console.error('‚ö†Ô∏è--Could not contact Telegram:', error);
  } else {
    console.error('‚ö†Ô∏è--Unknown error:', error);
  }
})

async function init() {
  const MONGODB_URI = process.env.MONGODB_URI;
  if (!MONGODB_URI) {
    throw new Error('MongoDB URI doesn\'t exist');
  }

  try {
    await mongoose.connect(MONGODB_URI);
    // await googleSheets.initialize();
    bot.start();

    // await bot.api.sendMessage(+adminId, '‚úÖ Bot started');

    console.log('‚úÖ--MongoDB connected & bot started');
  } catch (error) {
    console.error('‚ùå--Error initializing:', error);
  }
}

init();
