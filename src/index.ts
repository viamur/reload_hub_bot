import {conversations, createConversation} from '@grammyjs/conversations';
import {Bot, GrammyError, HttpError, InlineKeyboard, InputFile, session} from 'grammy';
import { collaborateConversation } from "./conversations/collaborate";
import 'dotenv/config';
import mongoose from 'mongoose';
import type {MyContext, MySession} from './types/types';
import {
  commandStart,
  commandSupport,
  commandAdmin,
  commandMenu,
  commandContacts,
  commandLocation,
  commandCollaborate,
  commandPrepareMaterials
} from './commands/index.js';


const token = process.env.BOT_TOKEN;
const adminId = process.env.ADMIN_ID;
if (!token) {
  console.error('‚ùå--empty BOT_TOKEN in .env');
  process.exit(1);
}

// Install session middleware, and define the initial session value.
function initial(): MySession {
  return {
    collab: {
      type: "",
      region: "",
      contact: "",
    }
  };
}

const bot = new Bot<MyContext>(token);

bot.use(conversations());
bot.use(session({ initial }))
bot.use(createConversation(collaborateConversation));

bot.api.setMyCommands([
  { command: 'start', description: 'üè† –ü–æ—á–∞—Ç–∏ —Å–ø–æ—á–∞—Ç–∫—É' },
  { command: 'menu', description: 'üìç –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é' },
  { command: 'support', description: 'üí¨ –ó–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é' },
  { command: 'contacts', description: 'üì± –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏' },
])

bot.command('start', commandStart);
bot.command('admin', commandAdmin);
bot.command('menu', commandMenu);
bot.command('support', commandSupport);
bot.command('contacts', commandContacts);


bot.on("edited_message", async (ctx) => {
  // Get the new, edited, text of the message.
  const editedText = ctx.msg.text;
  console.log(`editedText: ${editedText}`);
});

bot.hears('üõ† –Ø–∫ –ø—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Å–∏—Ä–æ–≤–∏–Ω—É', commandPrepareMaterials)
bot.hears('üéâ –•–æ—á—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏', commandCollaborate)
bot.hears('üìç –õ–æ–∫–∞—Ü—ñ—è', commandLocation)
bot.hears('üìù –ö–æ–Ω—Ç–∞–∫—Ç–∏', commandContacts);

bot.hears('üöö –í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é', async (ctx) => {
  console.log('üöö –í–∏–∫–ª–∏–∫ –∑–∞ —Å–∏—Ä–æ–≤–∏–Ω–æ—é')
})

bot.hears('üí∞ –¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É', async (ctx) => {
  console.log('üí∞ –¶—ñ–Ω–∏ –Ω–∞ —Å–∏—Ä–æ–≤–∏–Ω—É')
})


bot.callbackQuery('show_location', async (ctx) => {
  await commandLocation(ctx);
  await ctx.answerCallbackQuery();
});

bot.on('message:text', async ctx => {
  const isAdmin = ctx.chat.id === Number(adminId);

  try {
    if (isAdmin && ctx.msg.reply_to_message?.forward_origin?.type === 'user') {
      const replyFromId = ctx.msg.reply_to_message.forward_origin.sender_user.id;
      await ctx.api.sendMessage(replyFromId, ctx.msg.text);
      return;
    }

    if (!isAdmin) {
      await ctx.api.forwardMessage(Number(adminId), ctx.chat.id, ctx.msg.message_id);

      console.log('ctx.session?.timestampSendMessage', ctx.session?.timestampSendMessage)
      if (!ctx.session?.timestampSendMessage || ctx.session.timestampSendMessage < Date.now() - 1000 * 20) {
        ctx.session.timestampSendMessage = Date.now();
        return ctx.reply(
          `‚úÖ –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!\n\n` +
          `üëã –ù–∞—à–∞ –∫–æ–º–∞–Ω–¥–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ —Å–∫–æ—Ä–æ –∑ –≤–∞–º–∏ –∑–≤'—è–∂–µ—Ç—å—Å—è\n` +
          `‚åõÔ∏è –ó–∞–∑–≤–∏—á–∞–π –º–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î–º–æ –ø—Ä–æ—Ç—è–≥–æ–º –∫—ñ–ª—å–∫–æ—Ö —Ö–≤–∏–ª–∏–Ω\n\n` +
          `üôå –î—è–∫—É—î–º–æ –∑–∞ —Ç–µ—Ä–ø—ñ–Ω–Ω—è!`
        );

      }

    }
  } catch (error) {
    console.error('‚ùå--Error in message handler:', error);
    return ctx.reply(
      `‚ùå –û–π, —â–æ—Å—å –ø—ñ—à–ª–æ –Ω–µ —Ç–∞–∫...\n\n` +
      `üîÑ –ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Ö–≤–∏–ª–∏–Ω\n` +
      `üí° –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∞ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å—Å—è, –∑–≤'—è–∂—ñ—Ç—å—Å—è –∑ –Ω–∞–º–∏ —á–µ—Ä–µ–∑ @support_username`
    );
  }
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while handling update ${ctx.update.update_id}:`);
  const error = err.error;

  if (error instanceof GrammyError) {
    console.error('‚ö†Ô∏è--Error in request:', error.description);
  } else if (error instanceof HttpError) {
    console.error('‚ö†Ô∏è--Could not contact Telegram:', error);
  } else {
    console.error('‚ö†Ô∏è--Unknown error:', error);
  }
})

async function init() {
  const MONGODB_URI = process.env.MONGODB_URI;
  if (!MONGODB_URI) {
    throw new Error('MongoDB URI doesn\'t exist');
  }

  try {
    await mongoose.connect(MONGODB_URI);
    // await googleSheets.initialize();
    bot.start();

    // await bot.api.sendMessage(+adminId, '‚úÖ Bot started');

    console.log('‚úÖ--MongoDB connected & bot started');
  } catch (error) {
    console.error('‚ùå--Error initializing:', error);
  }
}

init();
