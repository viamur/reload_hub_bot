import {MyContext} from '../types/types';
import {CommandContext, InlineKeyboard} from 'grammy';

export async function commandAdmin(ctx: CommandContext<MyContext>) {
  const adminId = process.env.ADMIN_ID;

  if (!adminId) {
    console.error('‚ùå--empty ADMIN_ID in .env');
    return;
  }

  if (!ctx.from) {
    console.error('‚ùå--ctx.from is undefined');
    return;
  }

  if (+adminId === ctx.from.id) {
    await ctx.reply('–ü—Ä–∏–≤—ñ—Ç, –ê–¥–º—ñ–Ω!', {
      reply_markup: new InlineKeyboard()
        .text('‚ûï –î–æ–¥–∞—Ç–∏ –°–∏—Ä–æ–≤–∏–Ω—É', 'create_material').row()
        .text('üõ† –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –°–∏—Ä–æ–≤–∏–Ω–∏', 'update_material').row()
        .text('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –¥–µ–Ω—å', 'daily_stats').row()
        .text('üìÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –º—ñ—Å—è—Ü—å', 'monthly_stats').row()
    });
  } else {
    console.log(`‚ùå--User ${ctx.from.first_name} (${ctx.from.id} - ${ctx.from.username}) tried to access admin command.`);
    await ctx.api.sendMessage(adminId, `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${ctx.from.first_name} (${ctx.from.id} - ${ctx.from.username}) –Ω–∞–º–∞–≥–∞–≤—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏.`);
  }
}
