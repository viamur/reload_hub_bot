import {MyContext} from '../types/types';
import {User} from '../models/User';
import {mainMenuKeyboard} from '../keyboards/replyKeyboards';

export async function commandStart(ctx: MyContext) {
  if (!ctx.from) {
    return ctx.reply('User info is not available');
  }

  const {id, first_name, username} = ctx.from;

  try {
    const user = await User.findOne({ telegramId: id });
    if (!user) {
      const newUser = new User({
        telegramId: id,
        firstName: first_name,
        startBotAttempts: 1,
        username,
      })
      await newUser.save();
      await ctx.reply('–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ –¥–æ –±–æ—Ç–∞ –∑ –ø—Ä–∏–π–æ–º—É –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏!');
    } else {
      user.startBotAttempts += 1;
      await user.save();
      await ctx.reply('–í—ñ—Ç–∞—î–º–æ –∑–Ω–æ–≤—É —É –±–æ—Ç—ñ –∑ –ø—Ä–∏–π–æ–º—É –≤—Ç–æ—Ä—Å–∏—Ä–æ–≤–∏–Ω–∏!');
    }

    await ctx.reply(
      '–û–±–µ—Ä—ñ—Ç—å –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏–π —Ä–æ–∑–¥—ñ–ª –∑ –º–µ–Ω—é –Ω–∏–∂—á–µ üëá',
      { reply_markup: mainMenuKeyboard }
    );
  } catch (error) {
    console.error('‚ùå--Error while saving user:', error);
    return ctx.reply('–í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤–∞—à–æ—ó —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑ –ø—ñ–∑–Ω—ñ—à–µ.');
  }
}
